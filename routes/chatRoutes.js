const express = require('express');
const router = express.Router();
require('dotenv').config();

const { CohereClient } = require('cohere-ai');
const cohere = new CohereClient({ token: process.env.COHERE_API_KEY });

const { franc } = require('franc'); // Spr√•kdetektering
const langs = require('langs'); // F√∂r att konvertera spr√•k-kod till namn

const Customer = require('../models/Customer');

// AI-endpoint: /api/support/ask
router.post('/ask', async (req, res) => {
  const { message } = req.body;
  const sessionUser = req.session.user;

  if (!sessionUser || !sessionUser.email) {
    return res.status(401).json({ reply: '‚ùå Du √§r inte inloggad.' });
  }

  try {
    // H√§mta kunddata fr√•n databasen
    const customer = await Customer.findOne({ email: sessionUser.email });

    if (!customer) {
      return res.status(404).json({ reply: '‚ùå Kunde inte hitta kunddata.' });
    }

    // üß† Detektera vilket spr√•k anv√§ndaren skriver p√•
    const langCode = franc(message); // t.ex. 'spa', 'eng', etc.
    let detectedLanguage = 'sv'; // fallback

    if (langCode !== 'und') {
      const lang = langs.where('3', langCode);
      if (lang) {
        detectedLanguage = lang.name.toLowerCase(); // t.ex. 'spanish', 'english'
      }
    }

    // üìù Systemprompt med anv√§ndarinfo och spr√•k
    const systemPrompt = `
Du √§r en hj√§lpsam, tillm√∂tesg√•ende och v√§nlig AI-supportagent i en kundportal. Du svarar kortfattat men trevligt ‚Äì p√• ett s√§tt som k√§nns m√§nskligt och professionellt.

Anv√§ndaren kan skriva p√• vilket spr√•k som helst ‚Äì svara alltid p√• **samma spr√•k** som fr√•gan.

Spr√•ket f√∂r detta samtal √§r: ${detectedLanguage.toUpperCase()}.

Anv√§ndarens information:
- Namn: ${customer.name}
- E-post: ${customer.email}  
- Kampanjer: ${customer.campaigns?.join(', ') || 'Ingen information'} 
- Bransch: ${customer.industry || 'Ej angivet'}
- Webbplats: ${customer.website || 'Ej angiven'}
- Skapad: ${customer.createdAt ? customer.createdAt.toISOString().split('T')[0] : 'Ok√§nt'}
- Senast inloggad: ${customer.lastLogin ? customer.lastLogin.toISOString().split('T')[0] : 'Ok√§nt'}
- Plan: ${customer.plan || 'Gratis'}
- Anteckningar: ${customer.notes || 'Inga'}

Svara p√• ett varmt, respektfullt s√§tt, √§ven om fr√•gan √§r enkel.
Exempel: om anv√§ndaren fr√•gar om sin webbplats, skriv g√§rna n√•got i stil med "Sj√§lvklart! H√§r √§r l√§nken till din webbplats:" f√∂ljt av URL:en.
`;


    // üîÅ Anropa Cohere AI
    const response = await cohere.chat({
      model: 'command-r-plus',
      message,
      chatHistory: [],
      promptTruncation: 'AUTO',
      connectors: [],
      temperature: 0.7,
      p: 0.75,
      k: 0,
      stopSequences: [],
      returnLikelihoods: 'NONE',
      preamble: systemPrompt
    });

    res.json({ reply: response.text || '‚ö†Ô∏è Inget svar fr√•n AI.' });

  } catch (err) {
    console.error('‚ùå Fel vid AI-anrop:', err);
    res.status(500).json({ reply: '‚ùå Ett fel uppstod vid kontakt med AI.' });
  }
});

module.exports = router;
